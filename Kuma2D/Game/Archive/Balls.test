#include <Game.h>

constexpr int COUNT{10};
constexpr int MAX_SPEED{1000};
constexpr int MAX_MASS{10};

void SpawnBall();


// Initial starting function for 'Balls', a demo that tests the functions and limitations of the Kuma2D physics engine
void Kuma2D::Start()
{
	
	for (int i = 0; i < COUNT; i++)
	{
		float r1 = (float)RangeRNG(-WINDOW_SIZE.x / 2, WINDOW_SIZE.x / 2);
		float r2 = (float)RangeRNG(-WINDOW_SIZE.y / 2, WINDOW_SIZE.y / 2);
		float r3 = (float)RangeRNG(-MAX_SPEED, MAX_SPEED);
		float r4 = (float)RangeRNG(-MAX_SPEED, MAX_SPEED);
		float r5 = (float)RangeRNG(2, MAX_MASS);

		Entity e = CreateEntity(ComponentFlag::TRANSFORM | ComponentFlag::SPRITE | ComponentFlag::RIGIDBODY | ComponentFlag::CIRCLE_COLLIDER);

		Transform& tf = GetComponent<Transform>(e);
		Rigidbody& rb = GetComponent<Rigidbody>(e);

		tf.pos = { r1, r2 };
		tf.scale = { r5 * 10, r5 * 10 };

		rb.vel = { r3, r4 };
		rb.mass = r5;
		rb.drag = { 0.01,0.001 };

		GetComponent<Sprite>(e) = GetSprite("res\\sprites\\ball.png");
		GetComponent<CircleCollider>(e).radius = tf.scale.x / 2;
	}
}

Entity selectedEntity;
bool selected = false;

void Kuma2D::Update()
{
	Vector2<float> mouseWorldPos = ScreenToWorldPos(Input::Mouse::GetPos());

	if (Input::Mouse::GetButtonDown(SDL_BUTTON_LEFT))
	{
		std::vector<Entity> temp = *Entities();
		for (auto& entity : temp)
		{
			if ((Magnitude((GetComponent<Transform>(entity).pos - mouseWorldPos)) <= GetComponent<Transform>(entity).scale.x / 2))
			{
				selected = true;
				selectedEntity = entity;
				break;
			}
		}

		if (!selected)
			SpawnBall();
	}

	if (Input::Keyboard::GetKeyDown(SDL_SCANCODE_SPACE))
	{
		std::vector<Entity> temp = *Entities();
		for (auto& entity : temp)
		{
			DeleteEntity(entity);
		}
	}


	if (Input::Mouse::GetButtonDown(SDL_BUTTON_RIGHT))
	{
		std::vector<Entity> temp = *Entities();
		for (auto& entity : temp)
		{
			if ((Magnitude((GetComponent<Transform>(entity).pos - mouseWorldPos)) <= GetComponent<Transform>(entity).scale.x / 2))
			{
				DeleteEntity(entity);
				break;
			}
		}
	}

	if (selected && Input::Mouse::GetButtonUp(SDL_BUTTON_LEFT))
	{
		Rigidbody& rb = GetComponent<Rigidbody>(selectedEntity);
		rb.vel += 10 * (GetComponent<Transform>(selectedEntity).pos - mouseWorldPos) / rb.mass;
		selected = false;
	}
}


void SpawnBall()
{
	float r5 = (float)RangeRNG(10, 12);
	Entity e = Kuma2D::CreateEntity(ComponentFlag::TRANSFORM | ComponentFlag::SPRITE | ComponentFlag::CIRCLE_COLLIDER);
	Transform& tf = Kuma2D::GetComponent<Transform>(e);
	Kuma2D::GetComponent<Sprite>(e) = Kuma2D::GetSprite("res\\sprites\\ball.png");
	tf.pos = Kuma2D::ScreenToWorldPos(Input::Mouse::GetPos());
	tf.scale = {r5 * 10, r5 * 10};
	//GetComponent<BoxCollider>(e).scale = tf.scale;
	Kuma2D::GetComponent<CircleCollider>(e).radius = tf.scale.x / 2;
	/*
	Rigidbody& rb = GetComponent<Rigidbody>(e);
	rb.vel = {0, 0};
	rb.mass = r5;
	rb.friction = 5;
	*/
}


